// Prueba 1: Verificación del método VerificarRespuestas utilizando JUnit y Mockito//


package org.example;

import javafx.scene.control.TextField;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CrucigramaTest {

    private Crucigrama crucigrama;

    @BeforeEach
    public void setUp() {
        crucigrama = new Crucigrama();
        // Inicializar JavaFX Toolkit (necesario para pruebas de GUI)
        javafx.embed.swing.JFXPanel jfxPanel = new javafx.embed.swing.JFXPanel();
    }

    @Test
    public void testVerificarRespuestas_TodasCorrectas() {
        // Mock del objeto currentCrucigrama
        Object[][] mockCrucigrama = {
                {"A", true}, {"B", false}, {"C", true}, {"D", false}
        };
        crucigrama.currentCrucigrama = mockCrucigrama;

        // Mock de los TextFields y sus posiciones
        TextField textField1 = Mockito.mock(TextField.class);
        when(textField1.getText()).thenReturn("A");
        crucigrama.textFieldPositions.put(textField1, new int[]{0, 0});

        TextField textField2 = Mockito.mock(TextField.class);
        when(textField2.getText()).thenReturn("B");
        crucigrama.textFieldPositions.put(textField2, new int[]{0, 1});

        TextField textField3 = Mockito.mock(TextField.class);
        when(textField3.getText()).thenReturn("C");
        crucigrama.textFieldPositions.put(textField3, new int[]{0, 2});

        // Ejecutar el método a probar
        crucigrama.verificarRespuestas();

        // Verificar que todos los TextFields tengan el estilo adecuado
        verify(textField1).setStyle("-fx-background-color: lightgreen;");
        verify(textField2, never()).setStyle("-fx-background-color: lightgreen;");
        verify(textField3).setStyle("-fx-background-color: lightgreen;");
    }

    @Test
    public void testVerificarRespuestas_AlMenosUnaIncorrecta() {
        // Mock del objeto currentCrucigrama
        Object[][] mockCrucigrama = {
                {"A", true}, {"B", false}, {"C", true}, {"D", false}
        };
        crucigrama.currentCrucigrama = mockCrucigrama;

        // Mock de los TextFields y sus posiciones
        TextField textField1 = Mockito.mock(TextField.class);
        when(textField1.getText()).thenReturn("A");
        crucigrama.textFieldPositions.put(textField1, new int[]{0, 0});

        TextField textField2 = Mockito.mock(TextField.class);
        when(textField2.getText()).thenReturn("X"); // Respuesta incorrecta
        crucigrama.textFieldPositions.put(textField2, new int[]{0, 1});

        // Ejecutar el método a probar
        crucigrama.verificarRespuestas();

        // Verificar que el TextField con respuesta incorrecta tenga el estilo adecuado
        verify(textField2).setStyle("-fx-background-color: red;");
    }
}




//Prueba 2: verificar la funcionalidad del método crearCrucigrama//


package org.example;

import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CrucigramaTest {

    private Crucigrama crucigrama;

    @BeforeEach
    public void setUp() {
        crucigrama = new Crucigrama();
        // Inicializar JavaFX Toolkit (necesario para pruebas de GUI)
        javafx.embed.swing.JFXPanel jfxPanel = new javafx.embed.swing.JFXPanel();
    }

    @Test
    public void testCrearCrucigrama() {
        // Mock del GridPane
        GridPane mockGridPane = Mockito.mock(GridPane.class);

        // Mock del crucigrama
        Object[][] mockCrucigrama = {
                {"A", false}, {"B", true}, {"C", false},
                {"D", false}, {"E", true}, {"F", false},
        };

        // Llamar al método crearCrucigrama
        crucigrama.crearCrucigrama(mockGridPane, mockCrucigrama);

        // Verificar que se agregaron los componentes correctos al GridPane
        verify(mockGridPane, times(6)).add(any(Label.class), anyInt(), anyInt()); // Se agregan Labels visibles
        verify(mockGridPane, times(2)).add(any(TextField.class), anyInt(), anyInt()); // Se agregan TextFields ocultos
    }
}





//Prueba 3: verificar el funcionamiento del método start//
package org.example;

import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CrucigramaTest {

    private Crucigrama crucigrama;
    private Stage mockStage;

    @BeforeEach
    public void setUp() {
        crucigrama = new Crucigrama();
        mockStage = Mockito.mock(Stage.class);

        // Inicializar JavaFX Toolkit (necesario para pruebas de GUI)
        javafx.embed.swing.JFXPanel jfxPanel = new javafx.embed.swing.JFXPanel();
    }

    @Test
    public void testStart_ChoiceBoxSelection() {
        // Mock del ChoiceBox
        ChoiceBox<String> mockChoiceBox = Mockito.mock(ChoiceBox.class);
        when(mockChoiceBox.getSelectionModel().selectedItemProperty()).thenReturn(
                Mockito.mock(javafx.beans.property.ReadOnlyObjectProperty.class)
        );

        // Mock del GridPane
        GridPane mockGridPane = Mockito.mock(GridPane.class);
        doNothing().when(mockGridPane).add(ArgumentMatchers.any(), ArgumentMatchers.anyInt(), ArgumentMatchers.anyInt());

        // Mock del VBox
        VBox mockVBox = Mockito.mock(VBox.class);
        when(mockVBox.getChildren()).thenReturn(new javafx.collections.ObservableListWrapper<>(java.util.Collections.singletonList(mockChoiceBox)));

        // Mock del Scene
        javafx.scene.Scene mockScene = Mockito.mock(javafx.scene.Scene.class);
        when(mockScene.lookup("#vbox")).thenReturn(mockVBox);

        // Mock del primaryStage
        when(mockStage.getScene()).thenReturn(mockScene);

        // Ejecutar el método start con el primaryStage mockeado
        crucigrama.start(mockStage);

        // Verificar que el ChoiceBox tiene los ítems esperados
        verify(mockChoiceBox).getItems().addAll(
                "Escoge crucigrama", "Crucigrama 1", "Crucigrama 2"
        );

        // Simular selección de crucigrama 1 en el ChoiceBox
        Mockito.doAnswer(answer -> {
            javafx.beans.value.ChangeListener listener = answer.getArgument(0);
            listener.changed(null, "Escoge crucigrama", "Crucigrama 1");
            return null;
        }).when(mockChoiceBox.getSelectionModel().selectedItemProperty()).addListener(Mockito.any());

        // Verificar que se crea correctamente el crucigrama 1 en el GridPane
        verify(mockGridPane, times(1)).getChildren();

        // Simular selección de crucigrama 2 en el ChoiceBox
        Mockito.doAnswer(answer -> {
            javafx.beans.value.ChangeListener listener = answer.getArgument(0);
            listener.changed(null, "Escoge crucigrama", "Crucigrama 2");
            return null;
        }).when(mockChoiceBox.getSelectionModel().selectedItemProperty()).addListener(Mockito.any());

        // Verificar que se crea correctamente el crucigrama 2 en el GridPane
        verify(mockGridPane, times(2)).getChildren();
    }
}





//Prueba 4: prueba unitaria para la clase Crucigrama método verificarRespuestas - actualización los estilos de los TextField//

package org.example;

import javafx.scene.control.Alert;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CrucigramaTest {

    private Crucigrama crucigrama;
    private Stage mockStage;

    @BeforeEach
    public void setUp() {
        crucigrama = new Crucigrama();
        mockStage = Mockito.mock(Stage.class);

        // Inicializar JavaFX Toolkit (necesario para pruebas de GUI)
        javafx.embed.swing.JFXPanel jfxPanel = new javafx.embed.swing.JFXPanel();
    }

    @Test
    public void testVerificarRespuestas_Correctas() {
        // Mock de TextField
        TextField mockTextField1 = Mockito.mock(TextField.class);
        when(mockTextField1.getText()).thenReturn("A");
        when(mockTextField1.getStyle()).thenReturn("");

        // Mock de crucigrama actual
        Object[][] mockCrucigrama = {
                {"A", false},
                {"B", true},
        };
        crucigrama.setCurrentCrucigrama(mockCrucigrama);

        // Agregar mockTextField1 al mapa de posiciones
        crucigrama.getTextFieldPositions().put(mockTextField1, new int[]{0, 0});

        // Llamar al método verificarRespuestas()
        crucigrama.verificarRespuestas();

        // Verificar que el estilo de mockTextField1 sea lightgreen
        verify(mockTextField1).setStyle("-fx-background-color: lightgreen;");

        // Verificar que se muestra una alerta de respuestas correctas
        ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class);
        verify(crucigrama).showAlert(argument.capture());
        assertTrue(argument.getValue().contains("¡FELICITACIONES Todas las respuestas son correctas!"));
    }

    @Test
    public void testVerificarRespuestas_Incorrectas() {
        // Mock de TextField
        TextField mockTextField1 = Mockito.mock(TextField.class);
        when(mockTextField1.getText()).thenReturn("A");
        when(mockTextField1.getStyle()).thenReturn("");

        // Mock de crucigrama actual
        Object[][] mockCrucigrama = {
                {"A", false},
                {"B", true},
        };
        crucigrama.setCurrentCrucigrama(mockCrucigrama);

        // Agregar mockTextField1 al mapa de posiciones
        crucigrama.getTextFieldPositions().put(mockTextField1, new int[]{0, 0});

        // Cambiar la respuesta esperada para simular una respuesta incorrecta
        mockCrucigrama[0][0] = "C";

        // Llamar al método verificarRespuestas()
        crucigrama.verificarRespuestas();

        // Verificar que el estilo de mockTextField1 sea red
        verify(mockTextField1).setStyle("-fx-background-color: red;");

        // Verificar que se muestra una alerta de respuestas incorrectas
        ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class);
        verify(crucigrama).showAlert(argument.capture());
        assertTrue(argument.getValue().contains("Algunas respuestas son incorrectas. Inténtalo de nuevo."));
    }
}



//final//

