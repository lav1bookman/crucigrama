//Prueba 3: verificar el funcionamiento del método start//

package org.example;

import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CrucigramaTest {

    private Crucigrama crucigrama;
    private Stage mockStage;

    @BeforeEach
    public void setUp() {
        crucigrama = new Crucigrama();
        mockStage = Mockito.mock(Stage.class);

        // Inicializar JavaFX Toolkit (necesario para pruebas de GUI)
        javafx.embed.swing.JFXPanel jfxPanel = new javafx.embed.swing.JFXPanel();
    }

    @Test
    public void testStart_ChoiceBoxSelection() {
        // Mock del ChoiceBox
        ChoiceBox<String> mockChoiceBox = Mockito.mock(ChoiceBox.class);
        when(mockChoiceBox.getSelectionModel().selectedItemProperty()).thenReturn(
                Mockito.mock(javafx.beans.property.ReadOnlyObjectProperty.class)
        );

        // Mock del GridPane
        GridPane mockGridPane = Mockito.mock(GridPane.class);
        doNothing().when(mockGridPane).add(ArgumentMatchers.any(), ArgumentMatchers.anyInt(), ArgumentMatchers.anyInt());

        // Mock del VBox
        VBox mockVBox = Mockito.mock(VBox.class);
        when(mockVBox.getChildren()).thenReturn(new javafx.collections.ObservableListWrapper<>(java.util.Collections.singletonList(mockChoiceBox)));

        // Mock del Scene
        javafx.scene.Scene mockScene = Mockito.mock(javafx.scene.Scene.class);
        when(mockScene.lookup("#vbox")).thenReturn(mockVBox);

        // Mock del primaryStage
        when(mockStage.getScene()).thenReturn(mockScene);

        // Ejecutar el método start con el primaryStage mockeado
        crucigrama.start(mockStage);

        // Verificar que el ChoiceBox tiene los ítems esperados
        verify(mockChoiceBox).getItems().addAll(
                "Escoge crucigrama", "Crucigrama 1", "Crucigrama 2"
        );

        // Simular selección de crucigrama 1 en el ChoiceBox
        Mockito.doAnswer(answer -> {
            javafx.beans.value.ChangeListener listener = answer.getArgument(0);
            listener.changed(null, "Escoge crucigrama", "Crucigrama 1");
            return null;
        }).when(mockChoiceBox.getSelectionModel().selectedItemProperty()).addListener(Mockito.any());

        // Verificar que se crea correctamente el crucigrama 1 en el GridPane
        verify(mockGridPane, times(1)).getChildren();

        // Simular selección de crucigrama 2 en el ChoiceBox
        Mockito.doAnswer(answer -> {
            javafx.beans.value.ChangeListener listener = answer.getArgument(0);
            listener.changed(null, "Escoge crucigrama", "Crucigrama 2");
            return null;
        }).when(mockChoiceBox.getSelectionModel().selectedItemProperty()).addListener(Mockito.any());

        // Verificar que se crea correctamente el crucigrama 2 en el GridPane
        verify(mockGridPane, times(2)).getChildren();
    }
}

